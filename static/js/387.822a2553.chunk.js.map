{"version":3,"file":"static/js/387.822a2553.chunk.js","mappings":"gVAQO,SAAeA,IAAtB,4CAAO,OAAP,oBAAO,oGACkBC,EAAAA,EAAAA,IAAU,uBAD5B,cACCC,EADD,yBAEEA,EAASC,KAAKC,SAFhB,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,uFACkBL,EAAAA,EAAAA,IAAA,gBAA2B,CAChDM,OAAQ,CAAEC,MAAOF,KAFd,cACCJ,EADD,yBAIEA,EAASC,KAAKC,SAJhB,kEAOA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,uFACkBT,EAAAA,EAAAA,IAAA,iBAAoBS,IADtC,cACCR,EADD,yBAEEA,EAASC,MAFX,kEAKA,SAAeQ,EAAtB,+CAAO,OAAP,oBAAO,WAA+BD,GAA/B,uFACkBT,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,aADlB,cACCR,EADD,yBAEEA,EAASC,KAAKS,MAFhB,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BH,GAA/B,uFACkBT,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,aADlB,cACCR,EADD,yBAEEA,EAASC,KAAKC,SAFhB,kEAKA,SAASU,EAAYC,GAC1B,OAAOA,EAAU,6CACyBA,GACtCC,CACL,CApCDf,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBgB,QAAS,mC,4JCHEC,EAAOC,EAAAA,QAAAA,GAAH,iGAOJC,EAAUD,EAAAA,QAAAA,IAAH,8D,SC8CpB,EAjDa,WACX,OAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOT,EAAP,KAAaU,EAAb,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KAEA,GAAkCL,EAAAA,EAAAA,WAAS,GAA3C,eAAOM,EAAP,KAAkBC,EAAlB,KACQlB,GAAYmB,EAAAA,EAAAA,MAAZnB,QAwBR,OAtBAoB,EAAAA,EAAAA,YAAU,WAAM,wCACd,sGAEIF,GAAa,GACbJ,EAAS,MACTE,GAAW,GAJf,UAMkCf,EAAAA,EAAAA,IAAgBD,GANlD,QAMUqB,EANV,QAQwBC,OAClBV,EAAQS,GACHL,GAAW,GAVtB,kDAYUO,EAAU,KAAI/B,SAASC,KAAK+B,eAClCV,EAASS,GAbb,yBAeIL,GAAa,GAfjB,8EADc,uBAAC,WAAD,wBAmBdO,EACD,GAAE,CAACzB,KAGF,gCACGa,IAAS,SAACH,EAAD,UAAUG,IACnBI,IAAa,SAACP,EAAD,yBACbK,IAAW,SAACL,EAAD,4BACVK,GAAWb,IACX,SAACM,EAAD,UACGN,EAAKwB,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,aAAcC,EAAvB,EAAuBA,GAAvB,OACR,2BACE,gBAAKC,KAAK1B,EAAAA,EAAAA,IAAYwB,GAAeG,IAAKJ,EAAMK,MAAM,WACtD,uBAAIL,MAFGE,EADD,QAUnB,C","sources":["common/API.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\nimport NoImg from './no_data.jpg';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: 'e7dc56c25ee332beb552e37e9144086f',\n};\n\nexport async function getTrendingMovies() {\n  const response = await axios.get('/trending/movie/day');\n  return response.data.results;\n}\n\nexport async function getSearchMovie(movieName) {\n  const response = await axios.get(`/search/movie`, {\n    params: { query: movieName },\n  });\n  return response.data.results;\n}\n\nexport async function getMovieDetails(movieId) {\n  const response = await axios.get(`/movie/${movieId}`);\n  return response.data;\n}\n\nexport async function getMovieCredits(movieId) {\n  const response = await axios.get(`/movie/${movieId}/credits`);\n  return response.data.cast;\n}\n\nexport async function getMovieReviews(movieId) {\n  const response = await axios.get(`/movie/${movieId}/reviews`);\n  return response.data.results;\n}\n\nexport function getRightImg(partOfPath) {\n  return partOfPath\n    ? `https://image.tmdb.org/t/p/original${partOfPath}`\n    : NoImg;\n}\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  gap: 15px;\n  list-style: none;\n  flex-wrap: wrap;\n`;\n\nexport const Message = styled.div`\n  padding: 30px;\n  font-size: 36px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getMovieCredits, getRightImg } from 'common/API';\nimport { List, Message } from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState(null);\n  const [error, setError] = useState(null);\n  const [isEmpty, setIsEmpty] = useState(false);\n\n  const [isLoadind, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function fetchMovieCast() {\n      try {\n        setIsLoading(true);\n        setError(null);\n        setIsEmpty(false);\n\n        const fethedMovieCast = await getMovieCredits(movieId);\n\n        if (fethedMovieCast.length) {\n          setCast(fethedMovieCast);\n        } else setIsEmpty(true);\n      } catch (err) {\n        const errText = err.response.data.status_message;\n        setError(errText);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchMovieCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {error && <Message>{error}</Message>}\n      {isLoadind && <Message>Loading...</Message>}\n      {isEmpty && <Message>No cast info</Message>}\n      {!isEmpty && cast && (\n        <List>\n          {cast.map(({ name, profile_path, id }) => (\n            <li key={id}>\n              <img src={getRightImg(profile_path)} alt={name} width=\"150px\" />\n              <p>{name}</p>\n            </li>\n          ))}\n        </List>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["getTrendingMovies","axios","response","data","results","getSearchMovie","movieName","params","query","getMovieDetails","movieId","getMovieCredits","cast","getMovieReviews","getRightImg","partOfPath","NoImg","api_key","List","styled","Message","useState","setCast","error","setError","isEmpty","setIsEmpty","isLoadind","setIsLoading","useParams","useEffect","fethedMovieCast","length","errText","status_message","fetchMovieCast","map","name","profile_path","id","src","alt","width"],"sourceRoot":""}