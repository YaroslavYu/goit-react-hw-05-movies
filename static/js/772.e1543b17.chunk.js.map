{"version":3,"file":"static/js/772.e1543b17.chunk.js","mappings":"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","sources":["common/API.js","components/MovieBaseInfo/MovieBaseInfo.styled.js","components/MovieBaseInfo/MovieBaseInfo.jsx","pages/MovieDetails/MovieDetails.styled.js","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\nimport NoImg from './no_data.jpg';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: 'e7dc56c25ee332beb552e37e9144086f',\n};\n\nexport async function getTrendingMovies() {\n  const response = await axios.get('/trending/movie/day');\n  return response.data.results;\n}\n\nexport async function getSearchMovie(movieName) {\n  const response = await axios.get(`/search/movie`, {\n    params: { query: movieName },\n  });\n  return response.data.results;\n}\n\nexport async function getMovieDetails(movieId) {\n  const response = await axios.get(`/movie/${movieId}`);\n  return response.data;\n}\n\nexport async function getMovieCredits(movieId) {\n  const response = await axios.get(`/movie/${movieId}/credits`);\n  return response.data.cast;\n}\n\nexport async function getMovieReviews(movieId) {\n  const response = await axios.get(`/movie/${movieId}/reviews`);\n  return response.data.results;\n}\n\nexport function getRightImg(partOfPath) {\n  return partOfPath\n    ? `https://image.tmdb.org/t/p/original${partOfPath}`\n    : NoImg;\n}\n","import styled from 'styled-components';\n\nexport const StyledContainer = styled.div`\n  display: flex;\n  gap: 50px;\n  margin-top: 20px;\n`;\n","import { getRightImg } from 'common/API';\nimport { StyledContainer } from './MovieBaseInfo.styled';\n\nexport const MovieBaseInfo = ({ movie }) => {\n  const { title, overview, vote_average, genres, poster_path, release_date } =\n    movie;\n  const genresString = genres.length\n    ? genres.map(({ name }) => name).join(', ')\n    : 'Sorry, we dont have info about genres';\n\n  const userScore = `${Math.round(vote_average * 10)}%`;\n  const overviesString = overview ? overview : \"Don't have overview\";\n  const releaseYear = release_date ? `(${Number.parseInt(release_date)})` : '';\n\n  return (\n    <StyledContainer>\n      <img src={getRightImg(poster_path)} alt={title} width={'300px'} />\n      <div>\n        <h2>\n          {title} {releaseYear}\n        </h2>\n        <p>User score: {userScore}</p>\n        <h3>Overview</h3>\n        <p>{overviesString}</p>\n        <h3>Genres</h3>\n        <p>{genresString} </p>\n      </div>\n    </StyledContainer>\n  );\n};\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const Message = styled.div`\n  padding: 30px;\n  font-size: 36px;\n`;\n\nexport const NavLinkContainer = styled.div`\n  margin-top: 15px;\n  border-top: 1px solid grey;\n  border-bottom: 1px solid grey;\n`;\n\nexport const NavLinkTitle = styled.p`\n  font-weight: 600;\n`;\n\nexport const NavLinkList = styled.ul`\n  list-style: none;\n`;\n\nexport const NavLinkListItem = styled.li`\n  padding: 3px;\n`;\n\nexport const StyledNavLink = styled(NavLink)`\n  cursor: pointer;\n  &.active {\n    color: orangered;\n  }\n  &:hover {\n    color: orangered;\n  }\n`;\n","import { Outlet, Link, useLocation, useParams } from 'react-router-dom';\n\nimport { useState, useEffect, useRef, Suspense } from 'react';\n\nimport { getMovieDetails } from 'common/API';\nimport { pathTo } from 'common/pathes';\n\nimport { MovieBaseInfo } from 'components/MovieBaseInfo/MovieBaseInfo';\nimport {\n  Message,\n  NavLinkContainer,\n  NavLinkTitle,\n  NavLinkList,\n  NavLinkListItem,\n  StyledNavLink,\n} from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoadind, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  const refPreviousAddress = useRef(useLocation());\n  const toBack = refPreviousAddress.current.state?.from || pathTo.HOME;\n\n  useEffect(() => {\n    async function fetchMovie() {\n      try {\n        setIsLoading(true);\n        setError(null);\n        const fethedMovie = await getMovieDetails(movieId);\n\n        setMovie(fethedMovie);\n      } catch (err) {\n        const errText = err.response.data.status_message;\n        setError(errText);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchMovie();\n  }, [movieId]);\n\n  return (\n    <>\n      <Link to={toBack}>Go back</Link>\n      {movie && <MovieBaseInfo movie={movie} />}\n      {error && <Message>{error}</Message>}\n      {isLoadind && <Message>Loading...</Message>}\n      <NavLinkContainer>\n        <NavLinkTitle>Addictional information</NavLinkTitle>\n        <NavLinkList>\n          <NavLinkListItem>\n            <StyledNavLink to={pathTo.MOVIE_ID_CAST}>Cast</StyledNavLink>\n          </NavLinkListItem>\n          <NavLinkListItem>\n            <StyledNavLink to={pathTo.MOVIE_ID_REVIEWS}>Reviews</StyledNavLink>\n          </NavLinkListItem>\n        </NavLinkList>\n      </NavLinkContainer>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["getTrendingMovies","axios","response","data","results","getSearchMovie","movieName","params","query","getMovieDetails","movieId","getMovieCredits","cast","getMovieReviews","getRightImg","partOfPath","NoImg","api_key","StyledContainer","styled","MovieBaseInfo","movie","title","overview","vote_average","genres","poster_path","release_date","genresString","length","map","name","join","userScore","Math","round","overviesString","releaseYear","Number","parseInt","src","alt","width","Message","NavLinkContainer","NavLinkTitle","NavLinkList","NavLinkListItem","StyledNavLink","NavLink","useState","setMovie","error","setError","isLoadind","setIsLoading","useParams","toBack","useRef","useLocation","current","state","from","pathTo","useEffect","fethedMovie","errText","status_message","fetchMovie","to","Suspense","fallback"],"sourceRoot":""}